{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.983ee065.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n         <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n         <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.mode==='light'?'dark':'light'} Mode`}</label>\r\n      </div>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title:\"about Title\",\r\n    aboutText:\"about Text\"\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('')\r\n    // text = \"new text\"// wrong way to change state\r\n    // setText(\"new text\")//correct way to change state\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        console.log(\"lower case was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n\r\n\r\n    const handleclrClick = () => {\r\n        console.log(\"clear text\");\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"All text Erased\",\"warning\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        console.log(\"clear text\");\r\n        let newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"Text Copied to Clipboard\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces deleted\",\"success\");\r\n    }\r\n\r\n    const handleOnChange =(event) =>{\r\n        console.log(\"handle change\")\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\"  value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\" ></textarea>\r\n           </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick} >convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick} >convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleclrClick} >Clear text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy} >Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces} >Remove Extra spaces</button>\r\n        </div>\r\n          <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n             <h1>Your Text summary</h1>\r\n             <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n             <p>{0.008*text.split(\" \").length} minutes read</p>\r\n             <h2>Preview</h2>\r\n             <p>{text.length>0?text:\"Enter Something in the text box above to preview\"}</p>\r\n         </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n) \r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport About from './components/About';\r\nimport React, {useState} from 'react'\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   //Link \r\n// }from \"react-router-dom\"\r\n\r\nfunction App() {\r\n  const [mode,setMode]=useState('light');\r\n  const[alert,setAlert]=useState(null);\r\n\r\n  const showAlert = (message,type) =>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n\r\n  const toggleMode =()=>{\r\n    if(mode==='light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor=\"#042743\";\r\n      showAlert(\"Dark mode is Enabled\",\"success\");\r\n      document.title='TextUtils - Dark Mode';\r\n      // blinking Title \r\n    //   setInterval(() => {\r\n    //     document.title = 'Install Text Utils Now';\r\n    //   }, 2000);\r\n    //   setInterval(() => {\r\n    //     document.title = 'TextUtil is amazing';\r\n    //   }, 1500);\r\n    }\r\n    else {\r\n      setMode('light'); \r\n      document.body.style.backgroundColor=\"white\";\r\n      showAlert(\"Light mode is Enabled\",\"success\")\r\n      document.title='TextUtils - Light Mode'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {/* <Router> */}\r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\r\n    <Alert alert={alert}/>\r\n    <div className=\"container\">\r\n      {/* why to use exact path \r\n      /users ---> component1\r\n      /users/home ------->component2 */}\r\n       {/* <Switch> */}\r\n          {/* <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n          <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze below\" mode={mode}/> \r\n          </Route>\r\n        </Switch> */}\r\n        <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze below\" mode={mode}/> \r\n      </div>\r\n      {/* </Router> */}\r\n    {/* <About/> */}\r\n</>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}